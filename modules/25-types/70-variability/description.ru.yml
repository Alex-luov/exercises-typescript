---
name: Ковариантность и контрвариантность
theory: |

  Каждый раз, когда мы присваиваем значение или передаем аргументы в вызов функции, проверка типов TypeScript проверяет на совместимость типы. Когда мы передаем аргументом функцию, проверка выполняется не только для типов параметров, но и для возвращаемых типов. Например, для колбека функции-сортировки, ожидающей возврата `-1 | 0 | 1`, если мы передадим функцию возвращающую `number` мы получим ошибку `Type 'number' is not assignable to type '0 | 1 | -1'.`:

  ```typescript
  type ComparatorCallback = (item1: number, item2: number, index: number) => -1 | 0 | 1
  declare function sort(arr: Array<number>, callback: ComparatorCallback): Array<number>

  const arr = [1, 2, 3];
  const comparator = (item1: number, item2: number) => Math.sign(item1 - item2);
  //    ^? const comparator = (item1: number, item2: number) => number;

  sort(arr, comparator);
  //        ~~~~~~~~~~ Error: Type 'number' is not assignable to type '0 | 1 | -1'.
  ```

  Множество объединения трех литеральных типов `-1 | 0 | 1` является подмножеством `number`, но из ошибки можем понять, что возвращаемый тип должен быть либо таким же, либо более узким. Такое поведение проверки типов называется ковариантностью.

  Чтобы решить проблему с `ComparatorCallback` нам нужно сузить возвращаемый тип функции `comparator` до `-1 | 0 | 1` или более узкого. Мы перепишем код без `Math.sign`, чтобы вернуть нужный тип:

  ```typescript
  type ComparatorCallback = (item1: number, item2: number, index: number) => -1 | 0 | 1
  declare function sort(arr: Array<number>, callback: ComparatorCallback): Array<number>

  const arr = [1, 2, 3];
  const comparator = (item1: number, item2: number) => {
  //    ^? const comparator: (item1: number, item2: number) => -1 | 0 | 1;
      if (item1 === item2) {
          return 0;
      }

      return item1 > item2 ? 1 : -1;
  };

  sort(arr, comparator);
  ```

  Попробуйте самостоятельно объяснить поведение проверки типов через ковариантность в следующем примере:

  ```typescript
  type Formatter = (val: string) => string;

  const formatToConcrete: Formatter = (_val: string): 'test' => 'test';
  const formatToNumber: Formatter = (val: string | number): string | number => String(val);
  //    ~~~~~~~~~~~~~~
  ```

  Утиная типизация JavaScript привнесла свои особенности в передаваемые аргументы функций. Нам вполне достаточно проверки на наличие определенных полей или методов в объекте. Все более специфичные объекты, с дополнительными полями и методами также будут проходить такую проверку типов. Когда проверка требует более широкий тип это называется контрвариантностью.

  Тем самым в TypeScript все составные типы ковариантны в своих членах: объектах, классах, массивах и возвращаемых типах функций. И только типы параметров функций контрвариантны.

instructions: |

  В процессе ...

tips:
  - |
    [Статья Теория программирования: Вариантность](https://habr.com/ru/post/477448/)
