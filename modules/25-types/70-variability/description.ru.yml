---

name: Ковариантность и контрвариантность
theory: |
  Когда мы присваиваем значение или передаем аргументы в вызов функции, проверка типов TypeScript проверяет на совместимость типы. При передаче аргументом функцию, проверка выполняется и для типов параметров, и для возвращаемых типов. Для колбека функции-сортировки, ожидающей возврата `-1 | 0 | 1`, если мы передадим функцию возвращающую `number`, то получим ошибку `Type 'number' is not assignable to type '0 | 1 | -1'.`:

  ```typescript
  type ComparatorCallback = (item1: number, item2: number, index: number) => -1 | 0 | 1
  declare function sort(arr: Array<number>, callback: ComparatorCallback): Array<number>

  const arr = [1, 2, 3];
  const comparator = (item1: number, item2: number) => Math.sign(item1 - item2);
  // (item1: number, item2: number) => number;

  sort(arr, comparator); // Error: Type 'number' is not assignable to type '0 | 1 | -1'.
  ```

  Множество значений из объединения трех литеральных типов `-1 | 0 | 1` является подмножеством `number`, но из ошибки можем понять, что возвращаемый тип должен быть либо таким же, либо более узким. Такое поведение проверки типов называется ковариантностью.

  Чтобы решить проблему с `ComparatorCallback` нам нужно сузить возвращаемый тип функции `comparator` до `-1 | 0 | 1` или более узкого. Перепишем код без `Math.sign`, чтобы вернуть нужный тип:

  ```typescript
  type ComparatorCallback = (item1: number, item2: number, index: number) => -1 | 0 | 1
  declare function sort(arr: Array<number>, callback: ComparatorCallback): Array<number>

  const arr = [1, 2, 3];
  const comparator = (item1: number, item2: number) => {
  // (item1: number, item2: number) => -1 | 0 | 1;
      if (item1 === item2) {
          return 0;
      }

      return item1 > item2 ? 1 : -1;
  };

  sort(arr, comparator);
  ```

  Попробуйте самостоятельно объяснить поведение проверки типов через вариантность в следующем примере:

  ```typescript
  type Formatter = (val: string) => string;

  const formatToConcrete: Formatter = (): 'test' => 'test';
  const formatToNumber: Formatter = (val: '1') => val; // Error!
  ```

  <details>
    <summary>Ответ</summary>
    Тип параметров может быть шире, а тип на выходе - уже.
    В примере `formatToConcrete` не принимает никаких параметров, что дает более широкий тип, нежели требуемый `string`, а ворвращает более узкий литеральный тип. `formatToNumber` ожидает более узкий тип на входе, потому и возникает ошибка.
  </details>

  Если при работе с TypeScript учитывать наследние JavaScript с утиной типизацией, то все становится на свои места. Для того, чтобы код не упал с ошибкой достаточно проверки на наличие полей или методов нужных типов. А чтобы получить гарантии во внешнем мире, нужно чтобы переменная попадала под внешние ограничения. Для этого тип должен быть более узким или таким же.

instructions: |

  Реализуйте функцию `applyTransactions` и типы `Transaction`, `Wallet`. `applyTransactions` должна принимать аргумент типа `Wallet` и возвращать число, после применения всех транзакций к количеству денег на счету. В случае ошибки в одной из транзакций должно вернуться изначальное число.

  ```typescript
  const wallet: Wallet = {
    transactions: [(amount) => amount + 1],
    balance: 0
  }

  console.log(applyTransactions(wallet)) // 1
  ```

tips:
  - |
    [Теория программирования: Вариантность](https://habr.com/ru/post/477448/)

definitions:
  - name: Ковариантность
    description: |
      свойство типов, когда типы, составляющие объединение, являются подмножествами друг друга.
  - name: Контрвариантность
    description: |
      свойство типов, когда типы, составляющие объединение, являются надмножествами друг друга.
