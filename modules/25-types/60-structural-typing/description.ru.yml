---

name: Структурная типизация
theory: |

  В JavaScript мы можем работать с различными объектами и классами одинаковым образом, при этом нам не требуется опираться на наследование или определенные интерфейсы, достаточно наличия ожидаемых полей и методов. В мире такой подход называют утиной типизацией (Duck typing). Если что-то ходит как утка и крякает как утка, то это утка.

  ```javascript
  const user = {
    firstName: 'Vassiliy',
    lastName: 'Kuzenkov',
    type: 'user'
  }

  const admin = {
    firstName: 'Kirill',
    lastName: 'Mokevnin',
    type: 'admin'
  }

  const formatUser = (user) => [user.type, ':', user.firstName, user.lastName].join(' ');

  formatUser(user); // ok
  formatUser(admin); // ok
  ```

  В таких языках как Java, нам бы потребовалось определить интерфейс, затем имплементировать его для классов `User` и `Admin` отдельно. А в параметрах метода форматирования тип аргумента был бы этим интерфейсом, другой вариант: написать метод с перегрузкой для этих двух случаев. Языки с таким поведением используют номинативную типизацию (nominative typing).

  Как итог, чтобы организовать подход утиной типизации в Java потребуется написать много дополнительного кода.

  Для того чтобы упростить переход с JavaScript на TypeScript, при этом использовать проверки до выполнения кода был выбран подход структурной типизации. Тем самым мы можем легко переписать наш пример на TypeScript:

  ```typescript
  const user = {
    firstName: 'Vassiliy',
    lastName: 'Kuzenkov',
    type: 'user'
  }

  const admin = {
    firstName: 'Kirill',
    lastName: 'Mokevnin',
    type: 'admin'
  }

  const formatUser = (user: { type: string, firstName: string, lastName: string }) =>
    [user.type, ':', user.firstName, user.lastName].join(' ');

  formatUser(user); // ok
  formatUser(admin); // ok
  ```

  При этом структурная типизация не защищает нас от наличия дополнительных полей в объекте:

  ```typescript
  const moderator = {
    firstName: 'Danil',
    lastName: 'Polovinkin',
    type: 'moderator'
  }

  const formatUser = (user: { type: string, firstName: string, lastName: string }) =>
    [user.type, ':', user.firstName, user.lastName].join(' ');

  formatUser(moderator); // ok
  ```

  И об объектном типе можно думать как о описании структуры, которая накладывает ограничения на присваиваемые значения. Тут нам на помощь снова приходит теория множеств:

  <!-- TODO: добавить картинку с кругом { type: string, firstName: string, lastName: string } и значением с большим количеством полей внутри -->

  Объектные типы с большим количеством полей всегда являются подмножеством более базового типа. Тем самым когда мы говорим о сужении типа в объектных типах, мы говорим о дополнительных полях в нем.

instructions: |

tips:
  - |
    [Structural typing в официальной документации](https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes-func.html#structural-typing)
  - |
    [Как получить номинативную типизацию в TS](https://spin.atomicobject.com/2018/01/15/typescript-flexible-nominal-typing/)

definitions:
  - name: Структурная типизация
    description: |
      принцип, определяющий совместимость типов на основе их описания (структуре). Переменная типа `A`, также, может использоваться там же, где ожидается тип `B`, если обладает той же или более широкой (грубо, имеет больше полей) структурой.
