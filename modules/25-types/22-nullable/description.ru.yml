---

name: Null и Undefined
theory: |

  В TypeScript `null` и `undefined` не просто значения, а два типа, состоящие из одного значения. Зачем так сделано? Представьте, если бы TypeScript работал похожим на JavaScript образом, то есть эти значения можно было бы передавать в любом месте, неважно, что там ожидается: строка, массив и тому подобное. К чему бы привело такое поведение?

  Варианта здесь два. Либо возникновение ошибки "вызывается несуществующий метод". Такая проблема, например, существует в JavaScript:

  ```javascript
  function foo(value) {
    const upperValue = value.toUpperCase();
    // остальная логика
  }

  foo(null); // Uncaught TypeError: Cannot read properties of null (reading 'toUpperCase')
  ```

  В статически типизированных языках, где `null` используется как общий тип для всего, проверка типов вам ничего не подскажет и возникает исключение `NullPointerException` — одно из самых запоминающихся для всех пользователей. Потому код начинает обрастать проверками на null:

  ```java
  public void doSomething(SomeObject obj) {
    if(obj != null) {
      obj.myMethod();
    }
  }

  doSomething(null);
  ```

  В TypeScript c правильной (`strict`) конфигурацией подобная проверка встроена и статический анализатор скажет вам о возможной проблеме:

  ```typescript
  function foo(value?: string | null) {
    const upperValue = value.toUpperCase(); // Object is possibly 'null' or 'undefined'.
    // остальная логика
  }
  ```

  Чтобы ее решить, также требуется написать соответствующее условие или использовать оператор `?.`, что позволяет избежать ошибок во время исполнения кода:

  ```typescript
  function foo(value?: string | null) {
    if (value !== null && value !== undefined) {
      const upperValue = value.toUpperCase(); // (parameter) value: string
    }
    // остальная логика
  }
  ```

  Это стало возможным как раз благодаря выделению значений `null` и `undefined` в отдельные типы, а вместе с Narrowing и Union Types не пришлось изобретать дополнительный механизм. И все решение укладывается в концепцию "типы как множества". Благодаря каждой проверке мы отсекаем не подходящее нам множество значений и получаем безопасный вызов метода. Такие проверки также называются отсечением типов (Differentiating Types) и Type Guards.

instructions: |

  Реализуйте функцию `formatPrice()`, которая принимает число и возвращает строку с округлением до второго числа после запятой, если пришел `null` или `undefined` должна вернуться `'$0.00'`.

  ```typescript
  formatPrice(3.145); // '$3.15'
  formatPrice(200); // '$200.00'
  formatPrice(); // '$0.00'
  formatPrice(null); // '$0.00'
  ```
