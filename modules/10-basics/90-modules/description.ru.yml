---
name: Система модулей
theory: |

  Система модулей TypeScript была создана до стандартизации ESM модулей. По умолчанию она совместима с Node.js модулями, использует идентичный алгоритм определения импортов и экспортов, при этом синтаксически очень похожа на ESM, где мы используем ключевые слова `import`/`export` для импортирования в текущий модуль и экспорта из него, при этом остается валидным использование CommonJS модулей.

  ```typescript
  // @file helloWorld.ts
  export default function helloWorld() {
    console.log("Hello, world!");
  }

  // @file main.ts
  import helloWorld from './helloWorld';
  ```

  Как и в ESM стандарте также поддерживается именованный экспорт/импорт и импорт всего экспортированного через `import * as smth from './somewhere`.

  Некоторые пакеты поставляют только типы, для таких случаев есть специальный синтаксис, который позволят импортировать и экспортировать отдельно типы:

  ```typescript
  // @file user.types.ts
  export type User = { name: string };

  // @file main.ts
  import type { User } from './user.types';
  ```

  Если модули решают проблему разнородных сущностей и коллизий с помощью разнесения кода по нескольким файлам, то механизм `namespace` позволяет оставаться в рамках одного файла:

  ```typescript
  namespace Hello {
    export function helloWorld() {
        console.log("Hello, world!");
    }
  }

  const helloWorld = Hello.helloWorld();
  ```

  Больше всего этот механизм полезен авторам библиотек и оберток с типами, они заключают все интерфейсы в один `namespace`, что упрощает пользователям слияние интерфейсов (тема одного из следующих уроков в курсе), а также гарантию отсутствия коллизий имен.

instructions: |

  Реализуйте namespace `Company` в котором экспортируется функция `isEmployeeEmail()`. Функция принимает почту и домен. Если емейл пользователя содержит указанный домен, то функция возвращает `true`:

  ```typescript
  Company.isEmployeeEmail('tirion@hexlet.io', 'hexlet.io');
  // true

  Company.isEmployeeEmail('user@example.com', 'hexlet.io');
  // false
  ```


tips:
  - |
    [Официальная документация про модули](https://www.typescriptlang.org/docs/handbook/modules.html)
  - |
    [Как происходит Module Resolution](https://www.typescriptlang.org/docs/handbook/module-resolution.html#how-nodejs-resolves-modules)
  - |
    [О модулях в JavaScript на Hexlet](https://ru.hexlet.io/courses/programming-basics/lessons/modules/theory_unit)
  - |
    [Официальная документация про Namespaces](https://www.typescriptlang.org/docs/handbook/namespaces.html)
  - |
    [Метод includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes)
