---

name: Массивы
theory: |

  Как и в случае с примитивными типами данных, TypeScript умеет выводить тип массива.

  ```typescript
  const fruits = ['banana', 'mango', 'apple'];
  // Все работает
  const upperFruits = fruits.map((name) => name.toUpperCase());

  // А так уже нет
  // Property 'key' does not exist on type 'string'.
  const upperFruits = fruits.map((name) => name.key);
  ```

  Однако, массив — это составной тип данных, который представляет собой контейнер для какого-то другого типа. Например, массив чисел это не то же самое, что массив строк. Такой тип обозначается по-другому - с использованием квадратных скобок: `number[]`, `string[]`. Определение массива выше можно было бы записать так:

  ```typescript
  const fruits: string[] = ['banana', 'mango', 'apple'];
  ```

  Точно так же описываются типы в определении функций:

  ```typescript
  function toUpperArray(items: string[]): string[] {
    return items.map((s) => s.toUpperCase());
  }
  ```

instructions: |

  Анаграммы — это слова, которые состоят из одинаковых букв. Например:

      спаниель — апельсин
      карат — карта — катар
      топор — ропот — отпор

  Реализуйте и экспортируйте по умолчанию функцию, которая находит все анаграммы слова. Функция принимает исходное слово и список для проверки (массив), а возвращает массив всех анаграмм. Если в списке слов отсутствуют анаграммы, то возвращается пустой массив.

  ```typescript
  filterAnagrams('abba', ['aabb', 'abcd', 'bbaa', 'dada']);
  // ['aabb', 'bbaa']

  filterAnagrams('racer', ['crazer', 'carer', 'racar', 'caers', 'racer']);
  // ['carer', 'racer']

  filterAnagrams('laser', ['lazing', 'lazy',  'lacer']);
  // []
  ```

tips:
  - |
    [Официальная документация](https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#arrays)
