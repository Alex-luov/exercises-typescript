---

name: Массивы
theory: |

  В этом уроке мы поговорим про массивы. TypeScript умеет выводить их тип, как и в случае с примитивными типами данных:

  ```typescript
  const fruits = ['banana', 'mango', 'apple'];
  // Все работает
  const upperFruits = fruits.map((name) => name.toUpperCase());

  // А так уже нет
  // Property 'key' does not exist on type 'string'.
  const upperFruits = fruits.map((name) => name.key);
  ```

  **Массив** — это составной тип данных, который представляет собой контейнер для другого типа. Например, массив чисел — это не то же самое, что массив строк. Такой тип обозначается по-другому — используются квадратные скобки: `number[]`, `string[]`.
  
  <!-- TODO - автору: "Например, массив чисел — это не то же самое, что массив строк." - не совсем ясно, как это предложение связано с предыдущим. Говорим, что массив - это контейнер для другого типа. А пример как будто бы не поясняет этого, а просто говорит, что это разное. -->
  
  <!-- TODO - автору: "Такой тип обозначается..." - о каком типе здесь идет речь? Во всем абзаце не прослеживается общий смысл между предложениями.-->
  
  Определение массива выше можно было бы записать так:

  ```typescript
  const fruits: string[] = ['banana', 'mango', 'apple'];
  ```

  Точно так же описываются типы в определении функций:

  ```typescript
  function toUpperArray(items: string[]): string[] {
    return items.map((s) => s.toUpperCase());
  }
  ```

instructions: |

  Анаграммы — это слова, которые состоят из одинаковых букв. Например:

      спаниель — апельсин
      карат — карта — катар
      топор — ропот — отпор

  Реализуйте и экспортируйте по умолчанию функцию, которая находит все анаграммы слова. Функция принимает исходное слово и список для проверки — массив. А возвращает функция массив всех анаграмм. Если в списке нет анаграммы, то возвращается пустой массив:

  ```typescript
  filterAnagrams('abba', ['aabb', 'abcd', 'bbaa', 'dada']);
  // ['aabb', 'bbaa']

  filterAnagrams('racer', ['crazer', 'carer', 'racar', 'caers', 'racer']);
  // ['carer', 'racer']

  filterAnagrams('laser', ['lazing', 'lazy',  'lacer']);
  // []
  ```

tips:
  - |
    [Официальная документация](https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#arrays)
