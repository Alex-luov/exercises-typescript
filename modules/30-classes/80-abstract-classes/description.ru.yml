---

name: Абстрактные классы
theory: |

  Когда нам нужно определить общее поведение для нескольких классов, удобно использовать абстрактные классы, которые мы разберем в этом уроке.
  
  Абстрактные классы хоть и не могут быть созданы напрямую, но могут быть наследованы и указать явно, какой метод должен быть реализован в наследниках:

  ```typescript
  abstract class File {
    protected name: string;
    protected size: number;
    constructor(name: string, size: number) {
      this.name = name;
      this.size = size;
    }

    sizeInKb(): number {
      return this.size / 1024;
    }
  }

  class ImageFile extends File {
    constructor(name: string, size: number) {
      super(name, size);
    }
  }
  ```
  
  <!-- TODO - автору: не хватает описания кода - на что обратить внимание, или что тут сделали -->

  Чтобы выносить из классов общую часть кода, абстрактные классы активно используются для построения архитектуры приложения и фреймворков. Например, в React есть класс `Component`, который может быть представлен как абстрактный класс. Мы не можем создать его напрямую, но он требует от наследников реализации метода `render`. Это позволяет создавать компоненты, которые будут рендериться при инициализации:

  ```typescript
  abstract class Component {
    abstract render(): void;

    constructor() {
      this.render();
    }
  }
  ```
  
  <!-- TODO - автору: не хватает описания кода - на что обратить внимание, или что тут сделали -->

instructions: |

  Мы разрабатываем фреймворк для создания игр. Наша задача — создать абстрактный класс `GameObject`, который будет содержать общую логику для всех игровых объектов.
  
  Каждый игровой объект должен иметь координаты `x`, `y` на игровом поле. В объекте должны быть методы `move(x, y)`, которые накапливают смещения по осям `x` и `y` и метод `tick(delta)`, который обновляет координаты на основе накопленных смещений умноженных на `delta`.
  
  После обновления координаты смещения должны обнуляться. Все игровые объекты должны иметь метод `render()`, который отрисовывает их на игровом поле:

  ```typescript
  class Player extends GameObject {
    render(): string {
      return `Player: ${this.x}, ${this.y}`;
    }
  }

  class Enemy extends GameObject {
    render(): string {
      return `Enemy: ${this.x}, ${this.y}`;
    }
  }

  const scene = new GameScene();
  const player = new Player(0, 0);
  const enemy = new Enemy(20, 20);
  scene.addObject(player);
  scene.addObject(enemy);

  player.move(10, 10);
  enemy.move(20, 20);
  player.move(10, 10);

  scene.tick(0.5);
  console.log(scene.render());
  // Player: 5, 5
  // Enemy: 30, 30

  scene.tick(1);
  console.log(scene.render());
  // Player: 15, 15
  // Enemy: 30, 30
  ```

definitions:
  - name: Абстрактный класс
    description: |
      это класс, который не может быть создан напрямую. Он предназначен только для наследования. Для создания абстрактного класса используется ключевое слово `abstract`.

tips:
  - |
    [Когда использовать абстрактные классы в TypeScript](https://khalilstemmler.com/blogs/typescript/abstract-class)
